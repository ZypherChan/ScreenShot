# This is a basic workflow to help you get started with Actions

name: windows

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.12.6]
        qt_target: [desktop]
        qt_arch: [win64_msvc2017_64, win32_msvc2017]
        include:
        - qt_arch: win64_msvc2017_64
          msvc_arch: x64
        - qt_arch: win32_msvc2017
          msvc_arch: x86
    env:
      targetName: screenshot.exe
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Install Qt
      uses : jurplel/install-qt-action@v2.5.3
      with :
        version: ${{matrix.qt_ver}}
        target: ${{matrix.qt_target}}
        arch: ${{matrix.qt_arch}}
        mirror: http://mirrors.ocf.berkeley.edu/qt/
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: build_msvc
      shell: cmd
      env:
        vc_arch: ${{matrix.msvc_arch}}
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
        qmake
        nmake
   # tag 打包
    - name: package
      if: startsWith(github.event.ref, 'refs/tags/')
      env:
        VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
        archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
      shell: pwsh
      run: |
        # 创建文件夹
        New-Item -ItemType Directory ${env:archiveName}
        # 拷贝exe
        Copy-Item bin\${env:targetName} ${env:archiveName}\
        # 拷贝依赖
        windeployqt --qmldir . ${env:archiveName}\${env:targetName}
        # 打包zip
        Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
        # 记录环境变量packageName给后续step
        $name = ${env:archiveName}
        echo "::set-env name=packageName::$name"
        # 打印环境变量packageName
        Write-Host 'packageName:'${env:packageName}
     # tag 创建github-Release
    - name: createReleaseWin
      id: createReleaseWin
      if: startsWith(github.event.ref, 'refs/tags/') && steps.queryReleaseWin.outputs.needCreateRelease == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1.0.0
      with:
         tag_name: ${{ github.ref }}
         release_name: Release ${{ github.ref }}
         body: ${{ github.event.head_commit.message }}
         draft: false
         prerelease: false
    # tag 上传Release
    - name: uploadRelease
      id: uploadRelease
      if: startsWith(github.event.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1.0.1
      with:
        upload_url: ${{ env.uploadUrl }}
        asset_path: ./${{ env.packageName }}.zip
        asset_name: ${{ env.packageName }}.zip
        asset_content_type: application/zip
